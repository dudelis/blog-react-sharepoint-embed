{"version":3,"sources":["components/Columns/ChoiceColumn.tsx","components/Columns/LookupColumn.tsx","components/ItemView.tsx","components/Form.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","options","ChoiceColumn","props","_onChange","event","item","onChange","text","state","sp","web","lists","getByTitle","this","listName","fields","getByInternalNameOrTitle","select","get","then","optionResults","Choices","map","value","key","setState","Dropdown","label","placeholder","React","LookupColumn","lookupListName","items","getAll","newOptions","obj","ID","Title","fullOptionList","concat","ItemView","handleInputChange","column","stateInstance","handleSubmit","preventDefault","console","log","addedItem","MultipleLine","MultipleLineColumn","LookupColumnId","DateColumn","toISOString","YesNoColumn","add","iar","bind","TextField","id","required","ev","newValue","multiline","rows","DatePicker","ariaLabel","allowTextInput","onSelectDate","date","Toggle","defaultChecked","onText","offText","checked","PrimaryButton","onClick","containerStackTokens","childrenGap","padding","FormComponent","Stack","tokens","App","className","Form","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b9a94f17.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { sp, ItemAddResult } from \"@pnp/sp\";\r\nimport {\r\n    Dropdown,\r\n    IDropdownOption} from 'office-ui-fabric-react/lib/index';\r\n \r\nexport interface IChoiceColumnProps {\r\n    listName: string,\r\n    label: string,\r\n    placeholder: string,\r\n    onChange: (column: string, value: string)=> void\r\n}\r\n\r\ntype State = {\r\n    options: IDropdownOption[]\r\n}\r\n\r\nconst initialState: State = {\r\n    options: []\r\n}\r\n\r\nexport class ChoiceColumn extends React.Component<IChoiceColumnProps, State>{\r\n    constructor(props:IChoiceColumnProps){\r\n        super(props);\r\n        this.state = initialState;\r\n    }\r\n\r\n    componentDidMount(){\r\n        sp.web.lists.getByTitle(this.props.listName).fields.getByInternalNameOrTitle(\"ChoiceColumn\").select('Choices').get().then(options => {\r\n            let optionResults = options.Choices.map((value:string) => {\r\n                return {key: value, text: value}\r\n            }) as IDropdownOption[];\r\n            this.setState({options: optionResults})\r\n        });\r\n    }\r\n    private _onChange = (event: React.FormEvent<HTMLDivElement>, item?: IDropdownOption) => {\r\n        if (item){\r\n            this.props.onChange('ChoiceColumn', item.text);\r\n        }\r\n        else{\r\n            this.props.onChange('ChoiceColumn', '');\r\n        }\r\n      };\r\n\r\n    render(){\r\n        return (\r\n            <Dropdown\r\n                \r\n                        label=\"ChoiceColumn\"\r\n                        placeholder=\"Select or type an option\"\r\n                        options={this.state.options}\r\n                        onChange = {this._onChange}\r\n                    />\r\n        );\r\n    }\r\n    \r\n\r\n    \r\n};","import * as React from 'react';\r\nimport { sp, ItemAddResult } from \"@pnp/sp\";\r\nimport {\r\n    Dropdown,\r\n    IDropdownOption} from 'office-ui-fabric-react/lib/index';\r\n \r\nexport interface ILookupColumnProps {\r\n    lookupListName: string,\r\n    label: string,\r\n    placeholder: string,\r\n    onChange: (column: string, value: any)=> void\r\n}\r\n\r\ntype State = {\r\n    options: IDropdownOption[]\r\n}\r\n\r\nconst initialState: State = {\r\n    options: []\r\n}\r\n\r\nexport class LookupColumn extends React.Component<ILookupColumnProps, State>{\r\n    constructor(props:ILookupColumnProps){\r\n        super(props);\r\n        this.state = initialState;\r\n    }\r\n\r\n    componentDidMount(){\r\n        let optionResults: IDropdownOption[] = [{key: \"\", text: \"None\"}]\r\n        sp.web.lists.getByTitle(this.props.lookupListName).items.getAll().then(options => {\r\n            let newOptions = options.map((obj:any) => {\r\n                return {key: obj.ID, text: obj.Title}\r\n            }) as IDropdownOption[];\r\n            let fullOptionList = optionResults.concat(newOptions);\r\n            this.setState({options: fullOptionList})\r\n        });\r\n    }\r\n    private _onChange = (event: React.FormEvent<HTMLDivElement>, item?: IDropdownOption) => {\r\n        if (item){\r\n            this.props.onChange('LookupColumn', item.key);\r\n        }\r\n        else{\r\n            this.props.onChange('LookupColumn', '');\r\n        }\r\n      };\r\n\r\n    render(){\r\n        return (\r\n            <Dropdown\r\n                label={this.props.label}\r\n                placeholder={this.props.placeholder}\r\n                options={this.state.options}\r\n                onChange = {this._onChange}\r\n            />\r\n        );\r\n    }    \r\n};","import * as React from 'react';\r\nimport { sp, ItemAddResult } from \"@pnp/sp\";\r\nimport {\r\n    DefaultButton,\r\n    PrimaryButton,\r\n    DatePicker,\r\n    TextField,\r\n    Toggle,\r\n    BaseButton,\r\n    Button\r\n    } from 'office-ui-fabric-react/lib/index';\r\n\r\nimport {ChoiceColumn, IChoiceColumnProps} from './Columns/ChoiceColumn';\r\nimport {LookupColumn} from './Columns/LookupColumn';\r\nimport IMainList from '../interfaces/IMainList';\r\n\r\n\r\ntype handleInputChangeType = (column: string, value: any) => void;\r\nconst listName = 'MainList';\r\nexport default class ItemView extends React.Component<any, IMainList >{\r\n    constructor(props: any){\r\n        super(props);\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    async componentDidMount(){\r\n        let items = await sp.web.lists.getByTitle(listName).items.getAll();\r\n        console.log(items);\r\n    }\r\n\r\n    public render(): JSX.Element{\r\n        return (\r\n            <form>\r\n                <TextField\r\n                    id=\"titleColumn\"\r\n                    label=\"Title\"\r\n                    required\r\n                    onChange={(ev: React.FormEvent<HTMLInputElement| HTMLTextAreaElement>, newValue?: string|undefined)=> {this.handleInputChange(\"Title\", newValue)}}\r\n                />\r\n                <TextField\r\n                    id=\"multipleLineColumn\"\r\n                    multiline\r\n                    rows={3}\r\n                    label=\"MultipleLineColumn\"\r\n                    onChange={(ev: React.FormEvent<HTMLInputElement| HTMLTextAreaElement>, newValue?: string|undefined)=> {this.handleInputChange(\"MultipleLineColumn\", newValue)}}\r\n                />\r\n                <ChoiceColumn\r\n                    listName={listName}\r\n                    label=\"ChoiceColumn\"\r\n                    placeholder=\"Select or type an option\"\r\n                    onChange={this.handleInputChange}\r\n                />\r\n                <DatePicker\r\n                    label=\"DateColumn\"\r\n                    placeholder=\"Select a date...\"\r\n                    ariaLabel=\"Select a date\"\r\n                    allowTextInput={true}\r\n                    onSelectDate={(date: Date|null|undefined) => {this.handleInputChange(\"DateColumn\", date)}}\r\n                    />\r\n                <LookupColumn\r\n                    lookupListName={\"LookupList\"}\r\n                    label=\"LookupColumn\"\r\n                    placeholder=\"Select an option\"\r\n                    onChange={this.handleInputChange}\r\n                />\r\n                <Toggle\r\n                    label=\"YesNoColumn\"\r\n                    defaultChecked\r\n                    onText=\"Yes\"\r\n                    offText=\"No\"\r\n                    onChange={(ev: React.MouseEvent<HTMLElement>, checked?: boolean) => {this.handleInputChange(\"YesNoColumn\", checked)}}\r\n                />\r\n                <PrimaryButton\r\n                    text=\"Save\"\r\n                    onClick={this.handleSubmit}\r\n                />\r\n            </form>\r\n        )\r\n    }\r\n\r\n    handleInputChange:handleInputChangeType = (column, value) => {\r\n        let stateInstance = {[column]: value} as IMainList; \r\n        this.setState(stateInstance);\r\n    }\r\n    handleSubmit = (event: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement | HTMLDivElement | BaseButton | Button | HTMLSpanElement>)  =>{\r\n        event.preventDefault();\r\n        console.log(this.state);\r\n        let addedItem = {\r\n            Title: this.state.Title,\r\n            MultipleLine: this.state.MultipleLineColumn,\r\n            ChoiceColumn: this.state.ChoiceColumn,\r\n            LookupColumnId: this.state.LookupColumn,\r\n            DateColumn: this.state.DateColumn.toISOString(),\r\n            YesNoColumn: this.state.YesNoColumn\r\n        }\r\n        sp.web.lists.getByTitle(listName).items.add(addedItem).then((iar: ItemAddResult) => {\r\n            console.log(iar);\r\n        });\r\n    }\r\n}","import * as React from 'react';\r\nimport { Stack, IStackTokens } from 'office-ui-fabric-react/lib/Stack';\r\nimport ItemView from './ItemView';\r\nimport IMainList from '../interfaces/IMainList';\r\n\r\nconst containerStackTokens: IStackTokens = {\r\n    childrenGap: 10,\r\n    padding: 10\r\n  };\r\n\r\n  const FormComponent: React.FunctionComponent = () => {\r\n    return (\r\n      <Stack tokens={containerStackTokens}>\r\n        <ItemView/>\r\n      </Stack>\r\n    );\r\n  };\r\n\r\n  export default FormComponent;","import React from 'react';\r\nimport './App.css';\r\nimport FormComponent from './components/Form';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <FormComponent/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}